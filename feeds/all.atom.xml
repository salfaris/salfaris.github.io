<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Salman Faris</title><link href="https://salfaris.me/" rel="alternate"></link><link href="https://salfaris.me/feeds/all.atom.xml" rel="self"></link><id>https://salfaris.me/</id><updated>2021-08-18T23:25:00+01:00</updated><entry><title>The Coding Kata</title><link href="https://salfaris.me/blog/2021-08-18-the-coding-kata.html" rel="alternate"></link><published>2021-08-18T23:25:00+01:00</published><updated>2021-08-18T23:25:00+01:00</updated><author><name>Salman Faris</name></author><id>tag:salfaris.me,2021-08-18:/blog/2021-08-18-the-coding-kata.html</id><summary type="html">&lt;p&gt;A coding kata is &lt;em&gt;an exercise to sharpen your programming skills and muscle memory via repetition&lt;/em&gt;. I learnt this concept when I was reading &lt;strong&gt;The Clean Coder&lt;/strong&gt; (highly recommended!) and have since adopted it as part of my programming routine. It helps my hands "know" what to type when I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A coding kata is &lt;em&gt;an exercise to sharpen your programming skills and muscle memory via repetition&lt;/em&gt;. I learnt this concept when I was reading &lt;strong&gt;The Clean Coder&lt;/strong&gt; (highly recommended!) and have since adopted it as part of my programming routine. It helps my hands "know" what to type when I need to type.&lt;/p&gt;
&lt;p&gt;I have also adapted the concept of kata as a means to learn/revise programming languages effectively. Instead of writing a random script doing god knows what after learning the syntax, I would implement the simple linear regression algorithm from scratch in this language. Why this is a good kata you ask? Here is why among others:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You can practice using OOP in the new lang&lt;/li&gt;
&lt;li&gt;You will deal with ints, doubles, static and dynamic arrays.&lt;/li&gt;
&lt;li&gt;You will do some basic math operations.&lt;/li&gt;
&lt;li&gt;You will implement at least one function.&lt;/li&gt;
&lt;li&gt;You will implement at least a for loop.&lt;/li&gt;
&lt;li&gt;You might use an import.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To put simply, it ensures you use a lot of the functionalities in the language and actually spend time doing it.&lt;/p&gt;
&lt;p&gt;I recently wanted to refresh my mind on the C++ lang and so here's simple linear regression in C++.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LinearRegression&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;epoch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;learningRate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;LinearRegression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;epoch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;learningRate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;epoch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;epoch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;learningRate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;learningRate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dataLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;epoch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;epoch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;epoch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dataLength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;estimate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;estimate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                    &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;learningRate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;learningRate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;weights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;yPred&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dataLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dataLength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;yPred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;yPred&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And here's an example of the kata in JavaScript (although the way it expects data is a bit different compared to the C++ implementation).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LinearRegression&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weights&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;learningRate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;learningRate&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fittedValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;estimator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;w0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;w0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weights&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;estimate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;estimator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;estimate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;w0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nx"&gt;w0&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;learningRate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;w1&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;learningRate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;w0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fittedValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFittedValues&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getFittedValues&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;estimator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I leave the Python implementation to you ;)&lt;/p&gt;</content><category term="software-engineering"></category><category term="software-engineering"></category><category term="clean-coding"></category></entry><entry><title>Plotly.py main theme in Plotly.js</title><link href="https://salfaris.me/blog/2021-06-13-plotly-py-main-theme-in-plotly-js.html" rel="alternate"></link><published>2021-06-13T23:14:00+01:00</published><updated>2021-06-13T23:14:00+01:00</updated><author><name>Salman Faris</name></author><id>tag:salfaris.me,2021-06-13:/blog/2021-06-13-plotly-py-main-theme-in-plotly-js.html</id><summary type="html">&lt;p&gt;If you're like me who is used to using Plotly.py (i.e. Plotly Python) and then suddenly decided to use Plotly.js directly, you might immediately realize that there are some significant differences in terms of the plot design.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Plotly Python Plot" src="https://salfaris.me/blog/images/plotly_py_plot.png"&gt;&lt;/p&gt;
&lt;p&gt;For one, your default plot in Plotly.js has a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you're like me who is used to using Plotly.py (i.e. Plotly Python) and then suddenly decided to use Plotly.js directly, you might immediately realize that there are some significant differences in terms of the plot design.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Plotly Python Plot" src="https://salfaris.me/blog/images/plotly_py_plot.png"&gt;&lt;/p&gt;
&lt;p&gt;For one, your default plot in Plotly.js has a white background and not the steel blue colour as you would expect from a default Plotly.py plot. The reason is that the plots produced in the python version of Plotly come prepackaged with nice out-of-the-box themes. For example, the plot image above is a Plotly.py scatter plot with the default &lt;em&gt;plotly&lt;/em&gt; template. So how do we reproduce these themes inside of Plotly.js?&lt;/p&gt;
&lt;p&gt;Diving deeper into the Plotly documentation, I discovered that you can actually get the "theme settings" for the Plotly.py templates with just 4 lines of Python code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;plotly.io&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pio&lt;/span&gt;
&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;plotly&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;plotly_template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plotly_template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The Python code above prints the "theme settings" of the plot or in proper Plotly lingo, the plot &lt;strong&gt;layout&lt;/strong&gt; settings. In our particular case above where we set &lt;code&gt;template = "plotly"&lt;/code&gt;, we get the default plotly theme layout settings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;annotationdefaults&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;arrowcolor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#2a3f5f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;arrowhead&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;arrowwidth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;autotypenumbers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;strict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;coloraxis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;colorbar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;outlinewidth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ticks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, it is in serialized JSON format. The idea now then is to deserialize this layout settings into a JavaScript object literal and pass it into the layout of your plot in Plotly.js. I did the deserialize process manually because I cannot find a way to automate this process (I would love to hear if you are able to do it!). For the default plotly theme, the JavaScript object literal is given below:&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/0995e0808a22aca8f4afb5faeb4d79c7.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;const defaultPlotlyLayout = {
  annotationdefaults: { arrowcolor: "#2a3f5f", arrowhead: 0, arrowwidth: 1 },
  autotypenumbers: "strict",
  coloraxis: { colorbar: { outlinewidth: 0, ticks: "" } },
  colorscale: {
    diverging: [
      [0, "#8e0152"],
      [0.1, "#c51b7d"],
      [0.2, "#de77ae"],
      [0.3, "#f1b6da"],
      [0.4, "#fde0ef"],
      [0.5, "#f7f7f7"],
      [0.6, "#e6f5d0"],
      [0.7, "#b8e186"],
      [0.8, "#7fbc41"],
      [0.9, "#4d9221"],
      [1, "#276419"],
    ],
    sequential: [
      [0.0, "#0d0887"],
      [0.1111111111111111, "#46039f"],
      [0.2222222222222222, "#7201a8"],
      [0.3333333333333333, "#9c179e"],
      [0.4444444444444444, "#bd3786"],
      [0.5555555555555556, "#d8576b"],
      [0.6666666666666666, "#ed7953"],
      [0.7777777777777778, "#fb9f3a"],
      [0.8888888888888888, "#fdca26"],
      [1.0, "#f0f921"],
    ],
    sequentialminus: [
      [0.0, "#0d0887"],
      [0.1111111111111111, "#46039f"],
      [0.2222222222222222, "#7201a8"],
      [0.3333333333333333, "#9c179e"],
      [0.4444444444444444, "#bd3786"],
      [0.5555555555555556, "#d8576b"],
      [0.6666666666666666, "#ed7953"],
      [0.7777777777777778, "#fb9f3a"],
      [0.8888888888888888, "#fdca26"],
      [1.0, "#f0f921"],
    ],
  },
  colorway: [
    "#636efa",
    "#EF553B",
    "#00cc96",
    "#ab63fa",
    "#FFA15A",
    "#19d3f3",
    "#FF6692",
    "#B6E880",
    "#FF97FF",
    "#FECB52",
  ],
  font: { color: "#2a3f5f" },
  geo: {
    bgcolor: "white",
    lakecolor: "white",
    landcolor: "#E5ECF6",
    showlakes: true,
    showland: true,
    subunitcolor: "white",
  },
  hoverlabel: { align: "left" },
  hovermode: "closest",
  mapbox: { style: "light" },
  paper_bgcolor: "white",
  plot_bgcolor: "#E5ECF6",
  polar: {
    angularaxis: { gridcolor: "white", linecolor: "white", ticks: "" },
    bgcolor: "#E5ECF6",
    radialaxis: { gridcolor: "white", linecolor: "white", ticks: "" },
  },
  scene: {
    xaxis: {
      backgroundcolor: "#E5ECF6",
      gridcolor: "white",
      gridwidth: 2,
      linecolor: "white",
      showbackground: true,
      ticks: "",
      zerolinecolor: "white",
    },
    yaxis: {
      backgroundcolor: "#E5ECF6",
      gridcolor: "white",
      gridwidth: 2,
      linecolor: "white",
      showbackground: true,
      ticks: "",
      zerolinecolor: "white",
    },
    zaxis: {
      backgroundcolor: "#E5ECF6",
      gridcolor: "white",
      gridwidth: 2,
      linecolor: "white",
      showbackground: true,
      ticks: "",
      zerolinecolor: "white",
    },
  },
  shapedefaults: { line: { color: "#2a3f5f" } },
  ternary: {
    aaxis: { gridcolor: "white", linecolor: "white", ticks: "" },
    baxis: { gridcolor: "white", linecolor: "white", ticks: "" },
    bgcolor: "#E5ECF6",
    caxis: { gridcolor: "white", linecolor: "white", ticks: "" },
  },
  title: { x: 0.05 },
  xaxis: {
    automargin: true,
    gridcolor: "white",
    linecolor: "white",
    ticks: "",
    title: { standoff: 15 },
    zerolinecolor: "white",
    zerolinewidth: 2,
  },
  yaxis: {
    automargin: true,
    gridcolor: "white",
    linecolor: "white",
    ticks: "",
    title: { standoff: 15 },
    zerolinecolor: "white",
    zerolinewidth: 2,
  },
};&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Stating the obvious but since the layout setting is extracted from the Plotly documentation, it is the hard work of the people behind Plotly. Thank you for the awesome theme!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The final step is to pass this layout into the layout parameter of the Plotly plot, and you get your favorite default Plotly.py theme again but now directly in Plotly.js!&lt;/p&gt;</content><category term="web-dev"></category><category term="javascript"></category><category term="plotly"></category><category term="python"></category></entry><entry><title>Unit Testing with pytest</title><link href="https://salfaris.me/blog/2021-05-03-unit-testing-with-pytest.html" rel="alternate"></link><published>2021-05-03T12:36:00+01:00</published><updated>2021-05-18T11:33:00+01:00</updated><author><name>Salman Faris</name></author><id>tag:salfaris.me,2021-05-03:/blog/2021-05-03-unit-testing-with-pytest.html</id><summary type="html">&lt;p&gt;&lt;img alt="Post header" src="https://salfaris.me/blog/images/header-unit-testing-with-pytest.png"&gt;&lt;/p&gt;
&lt;p&gt;It is a common scene that we want to test our functions after we've done writing them. In Python, we can usually do this by printing to the console. For example, suppose we are interested in testing the following function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_positive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Add two positive integers x and …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Post header" src="https://salfaris.me/blog/images/header-unit-testing-with-pytest.png"&gt;&lt;/p&gt;
&lt;p&gt;It is a common scene that we want to test our functions after we've done writing them. In Python, we can usually do this by printing to the console. For example, suppose we are interested in testing the following function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_positive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Add two positive integers x and y. If the sum&lt;/span&gt;
&lt;span class="sd"&gt;     is negative or zero, return None.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which returns the sum of the two integers &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; if the output is strictly positive, or else return &lt;code&gt;None&lt;/code&gt;. Since we are adding two &lt;strong&gt;positive integers&lt;/strong&gt;, we expect that the &lt;code&gt;add_positive&lt;/code&gt; function returns a positive integer as well. So we can try a few pairs, say, &lt;code&gt;add_positive(2, 3)&lt;/code&gt; and &lt;code&gt;add_positive(1, 1)&lt;/code&gt;, and we expect these to return 5 and 2 respectively; both greater than 0. If we try &lt;code&gt;add_positive(-1, -5)&lt;/code&gt;, then this should return &lt;code&gt;None&lt;/code&gt; as it yields -6 instead which is less than 0. If we want to test our function with multiple inputs, we can do something like a &lt;code&gt;for&lt;/code&gt; loop. So maybe something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_positive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which should yield&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt; &lt;span class="m"&gt;5&lt;/span&gt;
&amp;gt;&amp;gt; &lt;span class="m"&gt;2&lt;/span&gt;
&amp;gt;&amp;gt; None
&amp;gt;&amp;gt; &lt;span class="m"&gt;190&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then we eyeball each of the output to see if it as expected.&lt;/p&gt;
&lt;p&gt;This is of course a correct way to do it as we can evaluate whether the output on the console is as expected; but is it efficient?&lt;/p&gt;
&lt;h2&gt;🧠 Why unit testing is a no-brainer&lt;/h2&gt;
&lt;p&gt;In a typical life cycle of a function, there are three situations where we would want to test our functions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;first time&lt;/strong&gt; it is implemented.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;When a test fails&lt;/strong&gt;, we fix the bug, and then we have to redo testing.&lt;/li&gt;
&lt;li&gt;When implementing a &lt;strong&gt;new feature&lt;/strong&gt; or &lt;strong&gt;refactoring code&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Imagine how many times we would have to manually test this function. If it would take 3 minutes per (manual) test, and if we would have to do it 100 times over the function's whole life cycle, then we would have effectively spent 3 x 100 = 300 minutes, which is roughly &lt;strong&gt;5 hours of testing&lt;/strong&gt;! Now if we have 10 functions to test, it would take us 50 hours or roughly &lt;strong&gt;2 days worth of time to test these functions&lt;/strong&gt;! I don't know about you, but that sounds like a lot of time to me for only 10 functions. This is why we would want to automate the testing process by writing unit tests, which, together with the planning phase, requires about an hour to write in perpetuity (in theory).&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Manually testing a function throughout its whole life cycle may take you 5 hours; whereas writing a properly planned unit test may take you only an hour, and this is one-fifth of the former.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are a variety of Python libraries to do unit testing, some of which are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pytest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nosetests&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;🧪 Basic unit testing procedure&lt;/h2&gt;
&lt;p&gt;In this post, we will look at &lt;code&gt;pytest&lt;/code&gt; because it is simply the most popular (hence, a lot of support, say, on StackOverflow) and easiest to use. We start by installing &lt;code&gt;pytest&lt;/code&gt; if it's not already installed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install pytest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 1: Creating the test module&lt;/h3&gt;
&lt;p&gt;Assume that the &lt;code&gt;add_positive()&lt;/code&gt; function lies in a module called &lt;code&gt;add_positive.py&lt;/code&gt;. We begin the unit testing process by creating a file called &lt;code&gt;test_add_positive.py&lt;/code&gt; in the same directory as &lt;code&gt;add_positive.py&lt;/code&gt;. Such a file will contain the unit tests of functions in &lt;code&gt;add_positive.py&lt;/code&gt;, and is called a &lt;strong&gt;test module&lt;/strong&gt;. The &lt;code&gt;test_&lt;/code&gt; in front of &lt;code&gt;test_add_positive.py&lt;/code&gt; is important as it lets &lt;code&gt;pytest&lt;/code&gt; knows that this is a file containing unit tests.&lt;/p&gt;
&lt;p&gt;_Remark: The test module for the module &lt;code&gt;add_positive.py&lt;/code&gt; does not have to be named &lt;code&gt;test_add_positive.py&lt;/code&gt;. You can name it &lt;code&gt;test_x.py&lt;/code&gt; or &lt;code&gt;test_covid.py&lt;/code&gt; or whatever as long as it is prepended with &lt;code&gt;test_&lt;/code&gt;. But it is good practice to follow the naming convention of &lt;code&gt;test*module_name&lt;/code&gt; to trace which module is this test module testing.*&lt;/p&gt;
&lt;h3&gt;Step 2: Importing inside the test module&lt;/h3&gt;
&lt;p&gt;The next step is to (mainly) import two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;pytest&lt;/code&gt; module;&lt;/li&gt;
&lt;li&gt;and the module (or function) we want to test.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So at the top of our test module &lt;code&gt;test_add_positive.py&lt;/code&gt;, we would have:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;add_positive&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;add_positive&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 3: Begin writing unit tests&lt;/h3&gt;
&lt;p&gt;A unit test is basically a Python function, no more and no less. The only thing special about a unit test is that it is prepended by &lt;code&gt;test_&lt;/code&gt; in its name. This is just to tell &lt;code&gt;pytest&lt;/code&gt; to use it as part of the testing procedure. Here is an example of a unit test declaration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_for_positive_pairs&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Inside the body of a unit test are &lt;strong&gt;assertions&lt;/strong&gt;, and this is the actual testing process. We want to test if our &lt;code&gt;add_positive()&lt;/code&gt; function returns correctly if positive pairs (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;) are passed into the function. So we assert the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_for_positive_pairs&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;add_positive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;add_positive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;99999&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;199998&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;How about if we want to add a second unit test which tests when a zero pair i.e. (0, 0) is passed into the function? Well we just write another function right below it. We expect &lt;code&gt;add_positive(0, 0)&lt;/code&gt; to return None, so we write exactly that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_for_positive_pairs&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;add_positive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;add_positive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;99999&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;199998&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_for_zero_pair&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;add_positive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I would like to add two more tests which test the &lt;code&gt;add_positive&lt;/code&gt; function when negative and mixed pairs are fed into the function. The whole test module should now look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;add_positive&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;add_positive&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_for_positive_pairs&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;add_positive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;add_positive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;99999&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;199998&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_for_negative_pairs&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;add_positive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;add_positive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_for_zero_pair&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;add_positive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_for_mixed_pairs&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;add_positive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;add_positive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;add_positive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;900&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Remark: Note that you can get as creative as you'd like with the values you're testing. It is good practice to always consider edge cases in the unit test, but this is a topic of a later post.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Step 4: Running pytest and reading the test report&lt;/h3&gt;
&lt;p&gt;Once you're done with writing the test module, testing is as easy as opening your terminal, &lt;code&gt;cd&lt;/code&gt;-ing into the directory containing the test module, and executing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pytest test_add_positive.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the implementation of &lt;code&gt;add_positive()&lt;/code&gt; is correct (with respect to our tests), you should see a test report like this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Unit-test-pass" src="https://salfaris.me/blog/images/unit-test-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Just ignore everything above "collected 4 items" as it is not too important. The breakdown of this test report is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Collected 4 items" means that we will be executing 4 unit tests.&lt;/li&gt;
&lt;li&gt;The 4 green dots indicates that we have pass all 4 of them, and they are sequential (see what happens when 1 fail below).&lt;/li&gt;
&lt;li&gt;The obvious "4 passed in 0.02s" message is the summary.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;📌 Why unit tests are important in prod&lt;/h2&gt;
&lt;p&gt;Three months after the &lt;code&gt;add_positive.py&lt;/code&gt; code has been deployed, your colleague Gilfoyle modified the &lt;code&gt;add_positive()&lt;/code&gt; function returning only the sum:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_positive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Add two positive integers x and y. If the sum&lt;/span&gt;
&lt;span class="sd"&gt;     is negative or zero, return None.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Apparently, he didn't read the short description of the function; he thought that you're adding an unnecesary check. However, the function is supposed to work like that – only returning if the sum is positive (think of another module which relies on the correctness of this function).&lt;/p&gt;
&lt;p&gt;If there were no unit tests written to check this modification, this seemingly trivial edit by Gilfoyle could have been merged into the main branch and could possibly crash the whole system! Thankfully, we implemented continuous integration and upon making a pull request, Gilfoyle was bombarded with the following test report:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Unit-test-fail" src="https://salfaris.me/blog/images/unit-test-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Here is a breakdown of the report:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Collected 4 items" means the same as before.&lt;/li&gt;
&lt;li&gt;The first green dot means we passed the first unit test, but the subsequent F's means we failed the second, third and fourth unit test;&lt;/li&gt;
&lt;li&gt;this is reflected in the FAILURES section below it, showing which exact lines contribute to these failures.&lt;/li&gt;
&lt;li&gt;The "3 failed, 1 passed in 0.19s" message is the summary.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes, we just want to run the test up until the first failure. This can be done by adding a &lt;code&gt;-x&lt;/code&gt; flag like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pytest -x test_add_positive.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you might be wondering, what to do if we have multiple functions to test in the same module given that this one single &lt;code&gt;add_positive&lt;/code&gt; function alone requires 4 unit tests. Things can start getting really messy right? To solve this issue, we can create a class containing these unit tests for each function we want to test. This will be a topic of a future post on testing, thanks for reading.&lt;/p&gt;</content><category term="python"></category><category term="python"></category><category term="testing"></category><category term="software-engineering"></category></entry><entry><title>Relational Databases in Python (part I)</title><link href="https://salfaris.me/blog/2021-04-30-relational-databases-in-python-part-I.html" rel="alternate"></link><published>2021-04-30T21:46:00+01:00</published><updated>2021-04-30T21:46:00+01:00</updated><author><name>Salman Faris</name></author><id>tag:salfaris.me,2021-04-30:/blog/2021-04-30-relational-databases-in-python-part-I.html</id><summary type="html">&lt;p&gt;&lt;img alt="Post header" src="https://salfaris.me/blog/images/header-relational-databases-in-python-part-I.png"&gt;&lt;/p&gt;
&lt;p&gt;We usually hear the word &lt;em&gt;databases&lt;/em&gt; being thrown around especially when talking about data-related things. So what is it, and what is the more precise term &lt;em&gt;relational databases&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;A relational database is like an Excel file. It is made up of &lt;strong&gt;tables&lt;/strong&gt; (note that this is plural) which holds data …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Post header" src="https://salfaris.me/blog/images/header-relational-databases-in-python-part-I.png"&gt;&lt;/p&gt;
&lt;p&gt;We usually hear the word &lt;em&gt;databases&lt;/em&gt; being thrown around especially when talking about data-related things. So what is it, and what is the more precise term &lt;em&gt;relational databases&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;A relational database is like an Excel file. It is made up of &lt;strong&gt;tables&lt;/strong&gt; (note that this is plural) which holds data in the form of columns and rows. In the Excel analogy, tables are basically &lt;em&gt;sheets&lt;/em&gt;. Moreover, tables can be &lt;em&gt;related&lt;/em&gt; to each other but they need a column to act as a bridge linking them. Such a column is usually called a &lt;strong&gt;key&lt;/strong&gt; (either primary key or foreign key). This feature of being related explains the &lt;em&gt;relational&lt;/em&gt; term in relational databases. Relational databases is part of the &lt;strong&gt;relational model&lt;/strong&gt; which is a much more general framework of structuring and handling data management.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;From now on, we shall simply refer to relational databases as just databases.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Introduction to SQLAlchemy&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install sqlalchemy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Great, we now know what databases are, but how do we work with them? If this is an Excel file, we just open it and the rest is obvious (at least we think it's obvious because we're used to working with it). How do we open and interact with a database? There are many ways to do this and there's no one right way. For example, you can work directly with SQLite or MySQL in the command line but things can really get messy if you do it this way.&lt;/p&gt;
&lt;p&gt;If you're using Python, then enter &lt;strong&gt;SQLAlchemy&lt;/strong&gt;! SQLAlchemy gives you the power of interacting with databases using SQL queries straight from Python. Plus, it helps us abstract away complex queries and the difference in databases (remember that there are a lot of popular databases e.g. MySQL, PostgreSQL and Oracle with subtle differences among them). So querying databases becomes cleaner (and more exciting?) via SQLAlchemy. To &lt;strong&gt;install SQLAlchemy&lt;/strong&gt; is as easy as executing the line of code you see below this section's title in your favorite terminal. If you're using Anaconda, then it is already shipped and ready to use!&lt;/p&gt;
&lt;p&gt;Additional notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;This is not an excuse to not learn writing raw SQL queries because understanding SQL is still important when working with tools like SQLAlchemy!&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Those of you who have built web applications with Flask or Django might realize that we usually handle data using an object-oriented approach – using so-called data models. This is the Object Relational Model (ORM) approach, which is one of the two main components of SQLAlchemy. The other main component is called the "core part" of SQLAlchemy which is really centred around the relational model of the database. The latter is the one that we will be focusing on in this post today.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;💬 Talking to a database, first steps&lt;/h2&gt;
&lt;h3&gt;Step 1: Create an engine&lt;/h3&gt;
&lt;p&gt;To write something on a paper, you would need a pencil. To turn the lights on, you would need to switch the toggle. &lt;em&gt;To interact with a database, you would need a so-called&lt;/em&gt; &lt;strong&gt;engine&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In theory, a database relies on this engine just like how a car would rely on its (car) engine. But I found that thinking of this engine as a mediator rather than a literal engine is much easier to digest.&lt;/p&gt;
&lt;p&gt;To create an engine, you first have to import the &lt;code&gt;create_engine&lt;/code&gt; function from &lt;code&gt;sqlalchemy&lt;/code&gt;. Then, you need to pass in a &lt;strong&gt;connection string&lt;/strong&gt; which in its simplest form specifies two things: (i) the database you want to talk to, and (ii) the path to the database. For example, if I want to connect to &lt;code&gt;race_data.db&lt;/code&gt; which is a SQLite database in my current directory, the connection string would be &lt;code&gt;"sqlite:///race_data.db"&lt;/code&gt;. So together, they would look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sqlite:///race_data.db&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Key terms&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;engine&lt;/strong&gt; is a mediator for SQLAlchemy to interact with a database.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;connection string&lt;/strong&gt; specifies the details of the database we want to interact with.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Step 2: Establish a connection&lt;/h3&gt;
&lt;p&gt;In the previous step, we have simply created an engine but have yet to &lt;strong&gt;connect&lt;/strong&gt; to it! To establish a connection, you can simply invoke another one-liner:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One thing worth pointing out is that SQLAlchemy is clever enough to not actually make a connection until we pass in some queries for it to execute.&lt;/p&gt;
&lt;h3&gt;Step 3: Checking table names&lt;/h3&gt;
&lt;p&gt;Recall that tables are to databases just like sheets are to Excel files. So you'd want to know what tables (not columns of a table, yet!) are available before making queries. To do this, you can simply execute&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table_names&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to get a list of available tables to work with. For me, this returns&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt; [&amp;#39;race_table&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which means that I have only one table named &lt;code&gt;'race_table'&lt;/code&gt;. In practice, you would usually have a few tables.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;📝 Querying the database using SQLAlchemy&lt;/h2&gt;
&lt;p&gt;From now on, we assume that we have instantiated an &lt;code&gt;engine&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; object exactly like what we did previously.&lt;/p&gt;
&lt;h3&gt;Raw SQL queries, ResultProxy and ResultSet&lt;/h3&gt;
&lt;p&gt;Recall that we use the SQL language to make CRUD operations – create, read, update and delete. If you are not familiar with this, I highly recommend that you learn a bit of SQL after reading this - my recommendation is &lt;a href="https://www.mikedane.com/databases/sql/" target="_blank"&gt;Mike Dane's&lt;/a&gt; free and complete SQL course, from installing MySQL to joining tables. However, for now, it is sufficient to know the "Hello World" of SQL – which is &lt;code&gt;SELECT * FROM this_table&lt;/code&gt; where &lt;code&gt;this_table&lt;/code&gt; is some table in the database. The query &lt;code&gt;SELECT * FROM this_table&lt;/code&gt; does exactly what you expect it to do, it selects every possible row (symbolized by the asterisk &lt;code&gt;*&lt;/code&gt;) in the table &lt;code&gt;this_table&lt;/code&gt; and returns it to the user. In my case, with my &lt;code&gt;race_data.db&lt;/code&gt; database, I would want to execute &lt;code&gt;SELECT * FROM race_table&lt;/code&gt;. So how would I do this with SQLAlchemy? This is where &lt;code&gt;connection&lt;/code&gt; from Step 2 comes in.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;connection&lt;/code&gt; object has a method &lt;code&gt;.execute()&lt;/code&gt; which can execute raw SQL queries like &lt;code&gt;SELECT * FROM race_table&lt;/code&gt;. This will then return a &lt;code&gt;ResultProxy&lt;/code&gt; object which can be utilized in various ways to get the data we want (based on our query). Here are some examples of how we would want our data:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sometimes, we know our query will return a unique result (e.g. because we query based on a unique ID), so it is trivial that we want the &lt;strong&gt;first and only result&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Sometimes, we want the &lt;strong&gt;whole result&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Sometimes, we want only the &lt;strong&gt;top 10&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Imagine processing 500k rows of data just because we want the top 10, not so efficient right? This is why we would want a two-layer process before getting our actual data, the first layer being the &lt;code&gt;ResultProxy&lt;/code&gt; object. Getting the actual data from the &lt;code&gt;ResultProxy&lt;/code&gt; object is simply a matter of invoking a method. For example, if we would want to get the whole result, we use the &lt;code&gt;.fetchall()&lt;/code&gt; method. If we want the top 10 result, we use the &lt;code&gt;.fetchmany()&lt;/code&gt; method with &lt;code&gt;size&lt;/code&gt; argument set to 10. Invoking these methods returns a &lt;code&gt;ResultSet&lt;/code&gt; object, which basically contains the data we want. Here is an example of a complete implementation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SELECT * FROM race_table&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;result_proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# ResultProxy&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result_proxy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchmany&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# ResultSet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Querying data in Python is a two-layer process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;strong&gt;ResultProxy&lt;/strong&gt; gives us flexibility to access the data that we queried – do you want 1, 10 or 500k?.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;ResultSet&lt;/strong&gt; contains the actual data that we queried, retrieved via a ResultProxy method.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Working with ResultSet&lt;/h3&gt;
&lt;p&gt;The ResultSet &lt;code&gt;results&lt;/code&gt; is a &lt;strong&gt;list&lt;/strong&gt; of tuples whose entries corresponds to columns in the table. Let's get the first row in &lt;code&gt;results&lt;/code&gt;. Since it is a list, we do this by accessing the zeroth element in the list via &lt;code&gt;row = results[0]&lt;/code&gt;. We can print the row &lt;strong&gt;to get the actual data&lt;/strong&gt;, a tuple with entries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;88&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;.95, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;5&lt;/span&gt;, &lt;span class="m"&gt;436&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;2013-11-03 13:19:25&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To &lt;strong&gt;get the column names&lt;/strong&gt; that correspond to each entry, we can invoke &lt;code&gt;row.keys()&lt;/code&gt; to get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Race #&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;WPM&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;Accuracy&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;Rank&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;# Racers&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;Text ID&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;Date/Time (UTC)&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we already know which column of interest we want to look at for a particular row, we can access the attribute of the row just like how we would normally do to access the value of a key in a dictionary. For example, if I'm interested in knowing the &lt;code&gt;Accuracy&lt;/code&gt; of this &lt;code&gt;row&lt;/code&gt;, I would just execute either &lt;code&gt;row.Accuracy&lt;/code&gt; or &lt;code&gt;row["Accuracy"]&lt;/code&gt; which returns &lt;code&gt;1&lt;/code&gt; as expected.&lt;/p&gt;
&lt;h3&gt;SQLAlchemy queries&lt;/h3&gt;
&lt;p&gt;I know I promised that SQLAlchemy can help abstract away complex SQL queries and database differences, and using raw SQL queries like we did so far doesn't seem to agree with this promise. Enter SQLAlchemy's neat and Pythonic way of querying using &lt;strong&gt;table reflection&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A table reflection or just &lt;strong&gt;reflection&lt;/strong&gt; is basically a process which reads the desired database, looks for your desired table and copies it into a &lt;code&gt;Table&lt;/code&gt; object (see below) as if you wrote a whole raw SQL query to create this table. Personally, the term reflection is quite misleading for me and I would more prefer the term &lt;em&gt;autocopy&lt;/em&gt; – because that is literally what the process does, and my philosophy is that explicit is better than nano-misleadings.&lt;/p&gt;
&lt;p&gt;To make a reflection, you would need to import two classes from the &lt;code&gt;sqlalchemy&lt;/code&gt; library: &lt;code&gt;MetaData&lt;/code&gt; and &lt;code&gt;Table&lt;/code&gt;. It is worth understanding a basic idea of what these things do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;MetaData&lt;/strong&gt; class can be thought of a folder or catalog that keeps information about database stuffs such as tables. In this way, we don't have to keep looking up table information because we have "organized" things nicely.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Table&lt;/strong&gt; class does exactly what you expect it to do. It stores and handles the reflected (i.e. autocopied) version of your desired table so that SQLAlchemy can interact with it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we know the required ingredients, let's see how to actually do a table reflection. Recall that we have instantiated an &lt;code&gt;engine&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; object from the previous section. We now instantiate a &lt;code&gt;MetaData&lt;/code&gt; object via &lt;code&gt;metadata = MetaData()&lt;/code&gt;; and then instantiate a &lt;code&gt;Table&lt;/code&gt; object passing the arguments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Our desired table; in my case, &lt;code&gt;"race_table"&lt;/code&gt; (this is a string, cf. Step 3 of checking table names).&lt;/li&gt;
&lt;li&gt;The instantiated &lt;code&gt;metadata&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;autoload&lt;/code&gt; to True, and put &lt;code&gt;autoload_with&lt;/code&gt; our &lt;code&gt;engine&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Overall, it should look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MetaData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MetaData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Table reflection&lt;/span&gt;
&lt;span class="n"&gt;race_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;race_table&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autoload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autoload_with&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first thing you might want to do then is to use the &lt;code&gt;repr&lt;/code&gt; function on &lt;code&gt;race_table&lt;/code&gt; to learn our table's details such as the column names together with their types such as REAL, INTEGER or TEXT. Mine returns this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt; Table&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;race_table&amp;#39;&lt;/span&gt;, MetaData&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None&lt;span class="o"&gt;)&lt;/span&gt;, Column&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Race #&amp;#39;&lt;/span&gt;, INTEGER&lt;span class="o"&gt;()&lt;/span&gt;, &lt;span class="nv"&gt;table&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;race_table&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;, Column&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WPM&amp;#39;&lt;/span&gt;, INTEGER&lt;span class="o"&gt;()&lt;/span&gt;, &lt;span class="nv"&gt;table&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;race_table&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;, Column&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Accuracy&amp;#39;&lt;/span&gt;, REAL&lt;span class="o"&gt;()&lt;/span&gt;, &lt;span class="nv"&gt;table&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;race_table&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;, Column&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Rank&amp;#39;&lt;/span&gt;, INTEGER&lt;span class="o"&gt;()&lt;/span&gt;, &lt;span class="nv"&gt;table&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;race_table&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;, Column&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;# Racers&amp;#39;&lt;/span&gt;, INTEGER&lt;span class="o"&gt;()&lt;/span&gt;, &lt;span class="nv"&gt;table&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;race_table&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;, Column&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Text ID&amp;#39;&lt;/span&gt;, INTEGER&lt;span class="o"&gt;()&lt;/span&gt;, &lt;span class="nv"&gt;table&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;race_table&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;, Column&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date/Time (UTC)&amp;#39;&lt;/span&gt;, TEXT&lt;span class="o"&gt;()&lt;/span&gt;, &lt;span class="nv"&gt;table&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;race_table&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="nv"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The true power of the SQLAlchemy way of querying comes now. To replicate our raw SQL query of &lt;code&gt;SELECT * FROM race_table&lt;/code&gt;, we can import and use the &lt;code&gt;select&lt;/code&gt; function from the &lt;code&gt;sqlalchemy&lt;/code&gt; library. The &lt;code&gt;select&lt;/code&gt; function can take a (list of) &lt;code&gt;Table&lt;/code&gt; object to select all the rows in that table. The equivalent query to &lt;code&gt;SELECT * FROM race_table&lt;/code&gt; is then &lt;code&gt;select([race_table])&lt;/code&gt;. More completely, we execute the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;race_table&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;result_proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# ResultProxy&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result_proxy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchmany&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# ResultSet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Observe that the last two lines are identical as to when we were writing raw SQL queries, the only difference being the first line. Hence, the way we access &lt;code&gt;results&lt;/code&gt; is exactly the same as we've discussed earlier. For the SELECT query, it might be trivial to use the &lt;code&gt;select&lt;/code&gt; function but you can imagine that when the queries gets more complex, this will be really nice and clean. Note that you can get the raw SQL query of &lt;code&gt;q&lt;/code&gt; by simply printing it to the console.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[1]: &lt;em&gt;Introduction to Databases in Python&lt;/em&gt;, DataCamp&lt;/li&gt;
&lt;li&gt;[2]: &lt;a href="https://stackoverflow.com/a/44098950/13698939" target="_blank"&gt;&lt;em&gt;Sam Hartman's Answer to Understanding MetaData() from SQLAlchemy in Python&lt;/em&gt;&lt;/a&gt;, Stack Overflow&lt;/li&gt;
&lt;/ul&gt;</content><category term="data-science"></category><category term="python"></category><category term="sql"></category><category term="sqlalchemy"></category><category term="databases"></category><category term="data-handling"></category></entry><entry><title>Making pastel-colored boxes using tcolorbox in LaTeX</title><link href="https://salfaris.me/blog/2021-04-07-pastel-colored-boxes-using-tcolorbox.html" rel="alternate"></link><published>2021-04-07T15:46:00+01:00</published><updated>2021-04-11T12:57:00+01:00</updated><author><name>Salman Faris</name></author><id>tag:salfaris.me,2021-04-07:/blog/2021-04-07-pastel-colored-boxes-using-tcolorbox.html</id><summary type="html">&lt;p&gt;One of the many questions I get when people see my &lt;span class="math"&gt;\(\LaTeX\)&lt;/span&gt;-ed math notes is &lt;em&gt;how do you create these nice pastel-colored boxes?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example tcolorbox" src="https://salfaris.me/blog/images/example-box.png"&gt;
&lt;img alt="Example 2 tcolorbox" src="https://salfaris.me/blog/images/example-box-2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;em&gt;Two examples of pastel-colored boxes from my math notes&lt;/em&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;I feel like this is a very relevant and important question, because I asked the exact same …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the many questions I get when people see my &lt;span class="math"&gt;\(\LaTeX\)&lt;/span&gt;-ed math notes is &lt;em&gt;how do you create these nice pastel-colored boxes?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example tcolorbox" src="https://salfaris.me/blog/images/example-box.png"&gt;
&lt;img alt="Example 2 tcolorbox" src="https://salfaris.me/blog/images/example-box-2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;em&gt;Two examples of pastel-colored boxes from my math notes&lt;/em&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;I feel like this is a very relevant and important question, because I asked the exact same thing when I was new to &lt;span class="math"&gt;\(\LaTeX\)&lt;/span&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Simple box using &lt;em&gt;fbox&lt;/em&gt; and &lt;em&gt;minipage&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;My first exposure to &lt;span class="math"&gt;\(\LaTeX\)&lt;/span&gt; box-like environments was my mentor &lt;a href="https://sites.google.com/site/tsoighaleo/"&gt;Ghaleo&lt;/a&gt;'s genius tutorial notes. He used them for two main reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to highlight important theorems, lemmas, etc;&lt;/li&gt;
&lt;li&gt;an empty space for students to follow along and fill in the blanks live in class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I tried to reproduce his box environment when I was writing my very first math notes on &lt;span class="math"&gt;\(\LaTeX\)&lt;/span&gt; – my Linear Algebra &amp;amp; Geometry II notes.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Linear Algebra &amp;amp; Geometry II notes" src="https://salfaris.me/blog/images/my-first-box.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;em&gt;A snippet of my Linear Algebra &amp;amp; Geometry II notes&lt;/em&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;It was achievable using the &lt;code&gt;fbox&lt;/code&gt; environment alone, but for it to generalize well, I have to throw in a &lt;code&gt;minipage&lt;/code&gt; usage as well. The code implementation is quite simple and requires no package imports. Just use the following code directly in your document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;% Simple box environment.&lt;/span&gt;
&lt;span class="k"&gt;\fbox&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt; &lt;span class="c"&gt;%&lt;/span&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;minipage&lt;span class="nb"&gt;}&lt;/span&gt;[t]&lt;span class="nb"&gt;{&lt;/span&gt;0.9&lt;span class="k"&gt;\textwidth&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;% Your text here.&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;minipage&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To make the box look cleaner, use the &lt;code&gt;center&lt;/code&gt; environment as well. Here is a concrete example of using this box. The code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;center&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\fbox&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt; &lt;span class="c"&gt;%&lt;/span&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;minipage&lt;span class="nb"&gt;}&lt;/span&gt;[t]&lt;span class="nb"&gt;{&lt;/span&gt;0.9&lt;span class="k"&gt;\textwidth&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;
    This is a plain small box.
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;minipage&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;center&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;would yield the box:&lt;/p&gt;
&lt;p&gt;&lt;img alt="plainbox" src="https://salfaris.me/blog/images/plain-box.png"&gt;&lt;/p&gt;
&lt;p&gt;Now the problem with this simple fbox is that... it's just plain black and white. I want something more vibrant and colourful, so I decided to start learning the &lt;a href="https://ctan.org/pkg/tcolorbox"&gt;tcolorbox&lt;/a&gt; package.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Transition to &lt;em&gt;tcolorbox&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;As usual, the best way to learn is to straight dive in and do. After (very) little reading on the package's documentation, I started to recreate pretty boxes that other people have made from scratch. These boxes are usually from notes I found online like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Evan Chen's &lt;a href="https://web.evanchen.cc/napkin.html"&gt;The Napkin project&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Tony Zhang's notes snippets from his &lt;a href="https://www.quora.com/Does-anybody-use-LaTeX-to-take-notes-especially-during-class-If-not-what-do-you-use-especially-when-you-need-to-write-down-equations"&gt;Quora post&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;or even the tcolorbox documentation itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With my then minimal knowledge, I started writing my Real Analysis notes. I was quite happy with the end product but the overall design felt a bit odd (as you can see in the figure below). Nevertheless, my initial goal was to just make prettier boxes and I think I've achieved just that.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Real Analysis notes" src="https://salfaris.me/blog/images/my-second-box.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;em&gt;A snippet of my Real Analysis notes&lt;/em&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;To reproduce the (proof) box above with a Cerulean colour, use the following code in your document's preamble:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;% In preamble.&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="na"&gt;[dvipsnames]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;xcolor&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="na"&gt;[many]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;tcolorbox&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\newtcolorbox&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;myAwesomeBox&lt;span class="nb"&gt;}{&lt;/span&gt;
    enhanced,
    sharp corners,
    breakable,  &lt;span class="c"&gt;% Allows page break.&lt;/span&gt;
    borderline west=&lt;span class="nb"&gt;{&lt;/span&gt;2pt&lt;span class="nb"&gt;}{&lt;/span&gt;0pt&lt;span class="nb"&gt;}{&lt;/span&gt;Cerulean&lt;span class="nb"&gt;}&lt;/span&gt;,
    colback=Cerulean!10,  &lt;span class="c"&gt;% Background color.&lt;/span&gt;
    colframe=Cerulean!10  &lt;span class="c"&gt;% Frame (border) color.&lt;/span&gt;
&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To see this box in action, we instantiate this environment in our document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;myAwesomeBox&lt;span class="nb"&gt;}&lt;/span&gt;
    This nice blue pastel box!
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;myAwesomeBox&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code should then yield:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Blue pastel box" src="https://salfaris.me/blog/images/my-third-box.png"&gt;&lt;/p&gt;
&lt;p&gt;I want to note two things regarding the imports:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;dvipsnames&lt;/code&gt; option for xcolor is simply a choice of the set of colors I want from &lt;code&gt;xcolor&lt;/code&gt;. It does affect the name of colors you can pass as arguments, for example, here I used &lt;code&gt;Cerulean&lt;/code&gt;. For a full set of possible colors in &lt;code&gt;xcolor&lt;/code&gt;, see &lt;a href="https://en.wikibooks.org/wiki/LaTeX/Colors"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;many&lt;/code&gt; option for &lt;code&gt;tcolorbox&lt;/code&gt; loads additional libraries which allows us to use more features from &lt;code&gt;tcolorbox&lt;/code&gt;. In particular for our use case, we want to be able to use &lt;code&gt;enhanced&lt;/code&gt;. See the &lt;a href="https://mirrors.nxthost.com/ctan/macros/latex/contrib/tcolorbox/tcolorbox.pdf"&gt;documentation&lt;/a&gt; for other options.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are some tweaks that you might want to consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you want to &lt;em&gt;add a nice smooth border-like effect&lt;/em&gt;, do this: instead of using &lt;code&gt;colframe=Cerulean!10&lt;/code&gt;, remove that line and put &lt;code&gt;boxrule=0pt&lt;/code&gt; instead. In general, &lt;code&gt;boxrule&lt;/code&gt; adjusts the border stroke.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to &lt;em&gt;remove padding inside the box&lt;/em&gt;, add &lt;code&gt;boxsep=0pt&lt;/code&gt;. In general, &lt;code&gt;boxsep&lt;/code&gt; controls the inside padding.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many more parameters that you can control and these can be found in the &lt;a href="https://mirrors.nxthost.com/ctan/macros/latex/contrib/tcolorbox/tcolorbox.pdf"&gt;tcolorbox documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nowadays, I write my notes using the &lt;a href="https://github.com/Adhumunt/NotesTeX"&gt;NotesTex&lt;/a&gt; package which coincidentally uses tcolorbox with a similar setting as mine. I guess this is one of the reasons why it was a no brainer for me to use it in the first place. The nice thing about the package is that it provides a complete framework to write notes in &lt;span class="math"&gt;\(\LaTeX\)&lt;/span&gt;. In particular, you don't have to reinvent the wheel for everything (e.g. theorem environment, sidenotes). And for features that you feel are missing, you can simply add it on your own with ease. I've added plenty of features already and they integrate quite well. I'd highly recommend checking NotesTex out!&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="latex"></category><category term="latex"></category><category term="writing"></category></entry><entry><title>Root-hunting algorithm: Newton's method</title><link href="https://salfaris.me/blog/2021-04-05-newton-method.html" rel="alternate"></link><published>2021-04-05T19:23:00+01:00</published><updated>2021-04-05T19:23:00+01:00</updated><author><name>Salman Faris</name></author><id>tag:salfaris.me,2021-04-05:/blog/2021-04-05-newton-method.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; Given a real-valued function &lt;span class="math"&gt;\(f(x)\)&lt;/span&gt; in one real variable, what are the values &lt;span class="math"&gt;\(x_0 \in \mathbb{R}\)&lt;/span&gt; such that &lt;span class="math"&gt;\(f(x_0) = 0\)&lt;/span&gt;?&lt;/p&gt;
&lt;p&gt;If the function &lt;span class="math"&gt;\(f(x)\)&lt;/span&gt; is linear, then the problem is trivial. Explicitly, if &lt;span class="math"&gt;\(f(x) = ax + b\)&lt;/span&gt; for some &lt;span class="math"&gt;\(a, b \in \mathbb{R}\)&lt;/span&gt;, then …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; Given a real-valued function &lt;span class="math"&gt;\(f(x)\)&lt;/span&gt; in one real variable, what are the values &lt;span class="math"&gt;\(x_0 \in \mathbb{R}\)&lt;/span&gt; such that &lt;span class="math"&gt;\(f(x_0) = 0\)&lt;/span&gt;?&lt;/p&gt;
&lt;p&gt;If the function &lt;span class="math"&gt;\(f(x)\)&lt;/span&gt; is linear, then the problem is trivial. Explicitly, if &lt;span class="math"&gt;\(f(x) = ax + b\)&lt;/span&gt; for some &lt;span class="math"&gt;\(a, b \in \mathbb{R}\)&lt;/span&gt;, then &lt;span class="math"&gt;\(x_0 = -b/a\)&lt;/span&gt; gives a solution as long as &lt;span class="math"&gt;\(a \neq 0\)&lt;/span&gt;. However, when the function is nonlinear, the problem can get complicated very fast. For example, try solving when the function is &lt;span class="math"&gt;\(f(x) = \sin(e^{x}) + \cos(\log x)\)&lt;/span&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Newton's idea (an overview)&lt;/h3&gt;
&lt;p&gt;One way of solving this problem is to &lt;em&gt;linearize&lt;/em&gt; the function &lt;span class="math"&gt;\(f(x)\)&lt;/span&gt; around a certain point &lt;span class="math"&gt;\(x_0\)&lt;/span&gt; of our choice so that we can easily solve the resulting linear equation. Say we get &lt;span class="math"&gt;\(x_1\)&lt;/span&gt; as a solution, then we repeat linearizing &lt;span class="math"&gt;\(f(x)\)&lt;/span&gt; around &lt;span class="math"&gt;\(x_1\)&lt;/span&gt;; so on and so forth. The initial point &lt;span class="math"&gt;\(x_0\)&lt;/span&gt; is chosen such that it is close to our hoped solution, say, &lt;span class="math"&gt;\(x^*\)&lt;/span&gt;. The idea is that if &lt;span class="math"&gt;\(x_0\)&lt;/span&gt; is suitably chosen, then the solutions &lt;span class="math"&gt;\(x_1, x_2, x_3, \ldots\)&lt;/span&gt; to each linear approximation of &lt;span class="math"&gt;\(f(x)\)&lt;/span&gt; approximates &lt;span class="math"&gt;\(x^*\)&lt;/span&gt; better and better, and in the limit converges to &lt;span class="math"&gt;\(x^*\)&lt;/span&gt;. This whole process is known as the &lt;strong&gt;Newton's method&lt;/strong&gt;. Here is a nice picture of the method applied to &lt;span class="math"&gt;\(f(x) = x^2\)&lt;/span&gt; over &lt;span class="math"&gt;\(n = 10\)&lt;/span&gt; iterations, starting at &lt;span class="math"&gt;\(x_0 = 1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Newton's method illustration" src="https://salfaris.me/blog/images/newton-method.png"&gt;&lt;/p&gt;
&lt;p&gt;We see from the illustration that the Newton's method converges towards &lt;span class="math"&gt;\(x^* = 0\)&lt;/span&gt;, as expected. For the code to generate this plot, see end of post.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Newton's idea (the algebra)&lt;/h3&gt;
&lt;p&gt;Let us make our discussion above more precise. Linearizing &lt;span class="math"&gt;\(f(x)\)&lt;/span&gt; around &lt;span class="math"&gt;\(x_0\)&lt;/span&gt; simply means Taylor expanding &lt;span class="math"&gt;\(f\)&lt;/span&gt; around &lt;span class="math"&gt;\(x_0\)&lt;/span&gt; and neglecting &lt;span class="math"&gt;\(\mathcal{O}(h^2)\)&lt;/span&gt; terms. Of course, this is assuming that we can actually do Taylor expansion in the first place! Explicitly, the Taylor expansion of &lt;span class="math"&gt;\(f\)&lt;/span&gt; around &lt;span class="math"&gt;\(x_0\)&lt;/span&gt; yields&lt;/p&gt;
&lt;div class="math"&gt;$$f(x) = f(x_0) + f'(x_0) (x - x_0) + \mathcal{O}(h^2). $$&lt;/div&gt;
&lt;p&gt;So if we neglect &lt;span class="math"&gt;\(\mathcal{O}(h^2)\)&lt;/span&gt; terms, we get (in approximation) the linear equation&lt;/p&gt;
&lt;div class="math"&gt;$$f(x) = f(x_0) + f'(x_0) (x - x_0).$$&lt;/div&gt;
&lt;p&gt;The solution to this linear equation is thus simply&lt;/p&gt;
&lt;div class="math"&gt;$$x_1 = x_0 - \frac{f(x_0)}{f'(x_0)}.$$&lt;/div&gt;
&lt;p&gt;We then repeat the process by linearizing &lt;span class="math"&gt;\(f\)&lt;/span&gt; around &lt;span class="math"&gt;\(x_1\)&lt;/span&gt;. In this case we have&lt;/p&gt;
&lt;div class="math"&gt;$$f(x) = f(x_1) + f'(x_1) (x - x_1) \implies x_2 = x_1 - \frac{f(x_1)}{f'(x_1)}, $$&lt;/div&gt;
&lt;p&gt;with &lt;span class="math"&gt;\(x_2\)&lt;/span&gt; being a solution. Doing this iteratively yields a general formula&lt;/p&gt;
&lt;div class="math"&gt;$$x_{n+1} = x_n - \frac{f(x_n)}{f'(x_n)},$$&lt;/div&gt;
&lt;p&gt;known as &lt;strong&gt;Newton's formula&lt;/strong&gt;. Here is the Newton's method in one statement.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Theorem&lt;/strong&gt; (Newton's method). Let &lt;span class="math"&gt;\(x^* \in \mathbb{R}\)&lt;/span&gt; be a solution to &lt;span class="math"&gt;\(f(x) = 0\)&lt;/span&gt;. If &lt;span class="math"&gt;\(x_n\)&lt;/span&gt; is an approximation of &lt;span class="math"&gt;\(x^*\)&lt;/span&gt; and &lt;span class="math"&gt;\(f'(x_n) \neq 0\)&lt;/span&gt;, then the next approximation to &lt;span class="math"&gt;\(x^*\)&lt;/span&gt; is given by
&lt;/p&gt;
&lt;div class="math"&gt;$$x_{n+1} = x_n - \frac{f(x_n)}{f'(x_n)},$$&lt;/div&gt;
&lt;p&gt;
with initial condition, a suitably chosen &lt;span class="math"&gt;\(x_0 \in \mathbb{R}\)&lt;/span&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Code implementation&lt;/h3&gt;
&lt;p&gt;An iterative implementation of the Newton's method in Python is given below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;iterative_newton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Solves f(x) = 0 using the Newton&amp;#39;s method.&lt;/span&gt;

&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;span class="sd"&gt;        f: A callable, the function f(x) of interest.&lt;/span&gt;
&lt;span class="sd"&gt;        df: A callable, the derivative of f(x).&lt;/span&gt;
&lt;span class="sd"&gt;        x0: Initial good point to start linearizing.&lt;/span&gt;
&lt;span class="sd"&gt;        n (Optional): Number of recursion steps to make.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# Sequence of xn.&lt;/span&gt;

    &lt;span class="c1"&gt;# Get latest x value in sequence and&lt;/span&gt;
    &lt;span class="c1"&gt;# apply the Newton recurrence formula.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using the same parameters as above, we can also implement a one-liner recursive implementation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recursive_newton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;recursive_newton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Observe that both algorithms have &lt;span class="math"&gt;\(\mathcal{O}(n)\)&lt;/span&gt; space complexity where &lt;span class="math"&gt;\(n\)&lt;/span&gt; is the number of iterations or depth of the recursion. The time complexity for the iterative implementation is also &lt;span class="math"&gt;\(\mathcal{O}(n)\)&lt;/span&gt;, but for the recursive implementation, it is a bit tricky to compute (so we leave it as an exercise!).&lt;/p&gt;
&lt;p&gt;Note that there is a small caveat to the Newton's method which we have implicitly highlight in this post, can you spot it?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code to generate Newton's method plot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We will utilize the &lt;code&gt;numpy&lt;/code&gt; and &lt;code&gt;matplotlib&lt;/code&gt; packages.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We first need two helper functions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;finite_diff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Returns the derivative of f(x) based on the&lt;/span&gt;
&lt;span class="sd"&gt;    finite difference approximation.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tangent_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Generates the tangent line to f(x) at x0 over&lt;/span&gt;
&lt;span class="sd"&gt;    the interval [a, b].&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;finite_diff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ytan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ytan&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We then define the function &lt;span class="math"&gt;\(f(x) = x^2\)&lt;/span&gt;, compute its derivative and apply Newton's method over &lt;span class="math"&gt;\(n = 10\)&lt;/span&gt; iterations, starting at &lt;span class="math"&gt;\(x_0 = 1\)&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;finite_diff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iterative_newton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# To utilize numpy broadcasting later.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We finally plot the function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bmh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Bounds on the x-axis.&lt;/span&gt;
&lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;
&lt;span class="n"&gt;mesh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# Points of the function f(x).&lt;/span&gt;
&lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Tangent lines to f(x) at the approximations.&lt;/span&gt;
&lt;span class="n"&gt;xtan0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ytan0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tangent_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mf"&gt;0.35&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xtan1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ytan1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tangent_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xtan2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ytan2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tangent_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$f(x) = x^2$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xtan0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ytan0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Linearization 1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xtan1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ytan1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Linearization 2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xtan2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ytan2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Linearization 3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;darkmagenta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Newton&amp;#39;s method&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;approximations&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linestyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;None&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;markersize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Labels for occurring approximations.&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vlines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ymin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ymax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
              &lt;span class="n"&gt;linestyles&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dotted&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$x_&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="n"&gt;textcoords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;offset points&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;xytext&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="n"&gt;ha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Grid and xy-axis.&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;both&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axvline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axhline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Labels and legend.&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Newton&amp;#39;s method applied to $f(x) = x^2$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="math"></category><category term="numerical-analysis"></category><category term="algorithms"></category></entry><entry><title>Blogging again!</title><link href="https://salfaris.me/blog/2021-04-05-blogging-again.html" rel="alternate"></link><published>2021-04-05T12:54:00+01:00</published><updated>2021-04-05T12:54:00+01:00</updated><author><name>Salman Faris</name></author><id>tag:salfaris.me,2021-04-05:/blog/2021-04-05-blogging-again.html</id><summary type="html">&lt;p&gt;I've been an active &lt;a href="http://salmanfariss.blogspot.com"&gt;blogger&lt;/a&gt; since 2011 up until 2016 (although most of the earlier contents are now hidden due to cringiness) where I talked about various things – life events, some tech stuff and my scholarship interview experiences. I stopped blogging when I started my International Baccalaureate (IB) diploma program …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been an active &lt;a href="http://salmanfariss.blogspot.com"&gt;blogger&lt;/a&gt; since 2011 up until 2016 (although most of the earlier contents are now hidden due to cringiness) where I talked about various things – life events, some tech stuff and my scholarship interview experiences. I stopped blogging when I started my International Baccalaureate (IB) diploma program. Throughout my undergraduate years, I channelled most of my writing energy answering IB questions on &lt;a href="https://www.quora.com/profile/Salman-Faris-44"&gt;Quora&lt;/a&gt; and writing my notes using LaTeX. Today, I've decided to start blogging again, focusing on math, statistics and ML.&lt;/p&gt;
&lt;p&gt;Do note that in the early stages of this blog, the contents might be inconsistent or quite random. This is because I am still finding the right pace and momentum in writing and generating content. Thanks for understanding!&lt;/p&gt;</content><category term="blog"></category><category term="general"></category></entry></feed>