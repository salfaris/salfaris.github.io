{
  "hash": "86ab472464c4e15a9631c7b9b481497a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"How to do `aws s3 ls s3://bucket/` using boto3 in python?\"\ncategories: [cloud, AWS, python]\nauthor: \"Salman Faris\"\ndate: \"12 03 2023\"\njupyter: python3\nformat:\n  html:\n    toc: true\n    html-math-method: katex\nexecute: \n  enabled: true\n  cache: false\n---\n\n\nToday, we look at how can we perform the following terminal command in python.\n\n```zsh\naws s3 ls s3://bucket/obj_in_bucket/\n```\n\n```text\nPRE subobj_1/\nPRE subobj_2/\nPRE subobj_3/\n...\n```\n\n## Why do we even care?\n\nA lot of times, you just want to list all the existing subobjects in a given object *without getting its content*. A typical use case is to list all existing objects in the bucket, where here, the bucket is viewed as an object â€“ the *root object*. This list action can be achieved using the simple `aws s3 ls` command in the terminal. \n\nBut what if we want to do it natively as part of a module in python? For example, if we want to trigger a callback on the server whenever a new subobject is found in our bucket. A fast way is to just perform an equivalent `aws s3 ls` in our python module, and this is our goal today.\n\nTo ensure clarity, let's kick off with the definition of a path, a bucket and an object prefix.\n\ndefinition\n: A path is a string that consists of an S3 tag, a **bucket** and an **object prefix**. For example, `s3://bucket/object/subobject/...` is a generic path where `s3://` is the S3 tag, `bucket` is the bucket and `object/subobject/...` is the object prefix. Note the position of `/` carefully.\n\n## `aws s3 ls` in python\n\nI assume that you've done the standard AWS credentials step, storing it at `~/.aws/credentials` for example. We can then initialize an S3 client in Python using `boto3.session.Session`, I hope this step is familiar to you.\n\n```python\nimport boto3\n\nsession = boto3.session.Session()\nclient = session.client(\"s3\")\n```\n\n\nNow that we have our S3 client, define our bucket and object prefix of interest.\n\n```python\nbucket = \"bucket_name\"\nobj_prefix = \"obj_in_bucket/\"\n```\n\nThen we can simply list all the existing subobjects of our given object prefix using the following function:\n\n```python\ndef aws_s3_ls(bucket: str, obj_prefix: str):\n    params = dict(Bucket=bucket, Prefix=obj_prefix, Delimiter=\"/\")\n\n    paginator = client.get_paginator(\"list_objects_v2\")\n    for page in paginator.paginate(**params):\n        for obj in page.get(\"CommonPrefix\", []):\n            print(\"PRE\", obj[\"Key\"])\n\naws_s3_ls(bucket, obj_prefix)\n```\n\n```text\nPRE subobj_1/\nPRE subobj_2/\nPRE subobj_3/\n...\n```\n\nAnd that's it! That was a short one and I hope to cover more AWS things in the future.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}