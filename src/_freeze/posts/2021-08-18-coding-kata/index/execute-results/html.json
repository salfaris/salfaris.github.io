{
  "hash": "e6ed4da202210d16cb70396ca0e7f488",
  "result": {
    "markdown": "---\ntitle: The Coding Kata\ncategories:\n  - software engineering\n  - clean coding\nauthor: Salman Faris\ndate: 8/18/2021\ndate-modified: 8/19/2021\nimage: ''\n---\n\nA coding kata is _an exercise to sharpen your programming skills and muscle memory via repetition_. I learnt this concept when I was reading **The Clean Coder** (highly recommended!) and have since adopted it as part of my programming routine. It helps my hands \"know\" what to type when I need to type.\n\nI have also adapted the concept of kata as a means to learn/revise programming languages effectively. Instead of writing a random script doing god knows what after learning the syntax, I would implement the simple linear regression algorithm from scratch in this language. Why this is a good kata you ask? Here is why among others:\n\n1. You can practice using OOP in the new lang\n2. You will deal with ints, doubles, static and dynamic arrays.\n3. You will do some basic math operations.\n4. You will implement at least one function.\n5. You will implement at least a for loop.\n6. You might use an import.\n\nTo put simply, it ensures you use a lot of the functionalities in the language and actually spend time doing it.\n\nI recently wanted to refresh my mind on the C++ lang and I also want to reinforce my JavaScript knowledge. So here's my linear regression implementation in these two languages (although the way data is expected is a bit different in the JS implementation compared to the C++ implementation).\n\n::: {.panel-tabset}\n## C++\n\n``` {.cpp}\n#include <vector>\nusing namespace std;\n\nclass LinearRegression {\n    private:\n        int m_epoch;\n        double m_learningRate;\n        vector<double> weights;\n\n    public:\n        LinearRegression(int epoch, double learningRate) {\n            this->m_epoch = epoch;\n            this->m_learningRate = learningRate;\n        }\n\n        void fit(vector<double> x, vector<double> y) {\n            vector<double> weights = {0, 0};\n            int dataLength = x.size();\n\n            int epoch = this->m_epoch;\n            for (int e = 0; e < epoch; e++) {\n                for (int i = 0; i < dataLength; i++) {\n                    double estimate = weights[0] + x[i]*weights[1];\n                    double error = y[i] - estimate;\n\n                    weights[0] += this->m_learningRate * error;\n                    weights[1] += this->m_learningRate * error * x[i];\n                }\n            }\n\n            this->weights = weights;\n        }\n\n        vector<double> predict(vector<double> x) {\n            int dataLength = x.size();\n            vector<double> yPred;\n            yPred.reserve(dataLength);  // Preallocate length of yPred based on size of x.\n\n            vector<double> weights = this->weights;\n            for (int i = 0; i < dataLength; i++) {\n                yPred.push_back(weights[0] + x[i]*weights[1]);\n            }\n\n            return yPred;\n        }\n};\n```\n\n## JavaScript\n\n``` {.javascript}\nclass LinearRegression {\n  constructor(params = {}) {\n    this.weights = params.weights || [];\n    this.learningRate = params.learningRate || 0.01;\n    this.data = [];\n    this.fittedValues = [];\n  }\n\n  estimator(x, weights) {\n    const [w0, w1] = weights;\n    return w0 + x * w1;\n  }\n\n  fit(data) {\n    this.data = data;\n    if (this.weights === undefined || this.weights.length === 0) {\n      this.weights = [0, 0];\n    }\n\n    for (let i = 0; i < this.data.length; i++) {\n      const { x, y } = this.data[i];\n\n      const estimate = this.estimator(x, this.weights);\n      const error = y - estimate;\n\n      let [w0, w1] = this.weights;\n\n      w0 += this.learningRate * error;\n      w1 += this.learningRate * error * x;\n\n      this.weights = [w0, w1];\n    }\n\n    this.fittedValues = this.getFittedValues();\n  }\n\n  getFittedValues() {\n    return this.data.map(({ x, y }) => {\n      return { x: x, y: this.estimator(x, this.weights) };\n    });\n  }\n}\n```\n\n:::\n\nI leave the Python implementation to you ;)\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}